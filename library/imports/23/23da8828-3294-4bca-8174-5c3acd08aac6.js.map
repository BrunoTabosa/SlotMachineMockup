{"version":3,"sources":["assets\\scripts\\slots\\Tile.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAM,IAAA,KAAwB,EAAE,CAAC,UAAU,EAAnC,OAAO,aAAA,EAAE,QAAQ,cAAkB,CAAC;AAG5C;IAAkC,wBAAY;IAA9C;QAAA,qEA0DC;QAxDS,cAAQ,GAAG,EAAE,CAAC;;IAwDxB,CAAC;IAlDC,oBAAK,GAAL;IAEA,CAAC;IAEK,qBAAM,GAAZ;uCAAgB,OAAO;;;4BACrB,qBAAM,IAAI,CAAC,YAAY,EAAE,EAAA;;wBAAzB,SAAyB,CAAC;;;;;KAC3B;IAEK,4BAAa,GAAnB;uCAAuB,OAAO;;;4BAC5B,qBAAM,IAAI,CAAC,YAAY,EAAE,EAAA;;wBAAzB,SAAyB,CAAC;wBAC1B,IAAI,CAAC,SAAS,EAAE,CAAC;;;;;KAClB;IAEK,2BAAY,GAAlB;uCAAsB,OAAO;;;gBACrB,IAAI,GAAG,IAAI,CAAC;gBAClB,sBAAO,IAAI,OAAO,CAAU,UAAA,OAAO;wBACjC,EAAE,CAAC,MAAM,CAAC,UAAU,CAAC,YAAY,EAAE,EAAE,CAAC,WAAW,EAAE,SAAS,SAAS,CAAC,GAAG,EAAE,cAAc;4BACvF,IAAI,CAAC,QAAQ,GAAG,cAAc,CAAC;4BAC/B,OAAO,CAAC,IAAI,CAAC,CAAC;wBAChB,CAAC,CAAC,CAAC;oBACL,CAAC,CAAC,EAAC;;;KACJ;IAED,sBAAO,GAAP,UAAQ,KAAa;QACnB,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QACtB,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IACvE,CAAC;IAED,wBAAS,GAAT;QACE,IAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QACrE,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;IAC5B,CAAC;IAED,8BAAe,GAAf,UAAgB,cAA6B;QAC3C,IAAG,IAAI,CAAC,SAAS,IAAI,IAAI,EACzB;YACE,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;SACxC;QACD,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAChE,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,cAAc,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IACrE,CAAC;IAED,2BAAY,GAAZ,UAAa,KAAK;QAChB,IAAG,IAAI,CAAC,SAAS,IAAI,IAAI,EACzB;YACE,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;SACxC;QACD,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,KAAK,CAAC;IAEhC,CAAC;IAvDD;QADC,QAAQ,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,WAAW,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;0CAC9B;IAGtB;QADC,QAAQ,CAAC,EAAC,IAAI,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,IAAI,EAAC,CAAC;2CACzB;IALC,IAAI;QADxB,OAAO;OACa,IAAI,CA0DxB;IAAD,WAAC;CA1DD,AA0DC,CA1DiC,EAAE,CAAC,SAAS,GA0D7C;kBA1DoB,IAAI","file":"","sourceRoot":"/","sourcesContent":["const { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class Tile extends cc.Component {\n  @property({ type: [cc.SpriteFrame], visible: true })\n  private textures = [];\n\n  @property({type: [cc.Node], visible: true})\n  private animation;\n  private curIndex;\n\n  start(): void {\n    \n  }\n\n  async onLoad(): Promise<void> {\n    await this.loadTextures();\n  }\n\n  async resetInEditor(): Promise<void> {\n    await this.loadTextures();\n    this.setRandom();\n  }\n\n  async loadTextures(): Promise<boolean> {\n    const self = this;\n    return new Promise<boolean>(resolve => {\n      cc.loader.loadResDir('gfx/Square', cc.SpriteFrame, function afterLoad(err, loadedTextures) {\n        self.textures = loadedTextures;\n        resolve(true);\n      });\n    });\n  }\n\n  setTile(index: number): void {\n    this.curIndex = index;\n    this.node.getComponent(cc.Sprite).spriteFrame = this.textures[index];\n  }\n\n  setRandom(): void {\n    const randomIndex = Math.floor(Math.random() * this.textures.length);\n    this.setTile(randomIndex);\n  }\n\n  toggleAnimation(winnersIndexes: Array<number>): void {\n    if(this.animation == null)\n    {\n      this.animation = this.node.children[0];\n    }\n    console.log(this.node.getComponent(cc.Sprite).spriteFrame.name);\n    this.animation.active = winnersIndexes.indexOf(this.curIndex) >= 0;    \n  }\n\n  setAnimation(value): void{\n    if(this.animation == null)\n    {\n      this.animation = this.node.children[0];\n    }\n    this.animation.active = value;\n    \n  }\n}\n"]}